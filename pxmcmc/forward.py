import pys2let
import numpy as np
import healpy as hp
from pxmcmc.utils import expand_mlm, flatten_mlm, alm2map, map2alm


class ForwardOperator:
    """
    Base Forward operator
    Children of this class must define analysis/synthesis forward and gradg functions
    Children must also take data and sig_d in the constructor
    """

    def __init__(self, data, sig_d, setting):
        self.data = data
        self.sig_d = sig_d
        if setting not in ["analysis", "synthesis"]:
            raise ValueError
        self.setting = setting

    def forward(self, X):
        if self.setting == "analysis":
            return self._forward_analysis(X)
        else:
            return self._forward_synthesis(X)

    def calc_gradg(self, preds):
        if self.setting == "analysis":
            return self._gradg_analysis(preds)
        else:
            return self._gradg_synthesis(preds)

    def _forward_analysis(self, X):
        raise NotImplementedError

    def _forward_synthesis(self, X):
        raise NotImplementedError

    def _gradg_analysis(self, preds):
        raise NotImplementedError

    def _gradg_synthesis(self, preds):
        raise NotImplementedError


class ISWTOperator(ForwardOperator):
    """
    Inverse spherical wavelet transfrom operator.
    Returns the spherical harmonic coefficients.
    Analysis: sample pixel values
    Synthesis: sample harmonic wavelet coefficeints
    """

    def __init__(self, data, sig_d, L, B, J_min, setting, dirs=1, spin=0):
        super().__init__(data, sig_d, setting)
        self.L = L
        self.B = B
        self.J_min = J_min
        self.J_max = pys2let.pys2let_j_max(self.B, self.L, self.J_min)
        self.nscales = self.J_max - self.J_min + 1
        self.dirs = dirs
        self.spin = spin

    def _forward_synthesis(self, X):
        """
        Takes a vector X containing the scaling and wavelet coefficients generated by the chain and predicts output harmonic coefficients
        """
        wav_lm, scal_lm = expand_mlm(X, self.nscales)
        scal_lm_hp = pys2let.lm2lm_hp(scal_lm, self.L)
        wav_lm_hp = np.zeros(
            [(self.L) * (self.L + 1) // 2, self.nscales], dtype=np.complex,
        )
        for j in range(self.nscales):
            wav_lm_hp[:, j] = pys2let.lm2lm_hp(
                np.ascontiguousarray(wav_lm[:, j]), self.L
            )
        clm_hp = pys2let.synthesis_axisym_lm_wav(
            wav_lm_hp, scal_lm_hp, self.B, self.L, self.J_min
        )
        clm = pys2let.lm_hp2lm(clm_hp, self.L)
        return clm

    def _forward_analysis(self, X):
        """
        Takes a vector X containing pixel values generated by the chain and predicts output harmonic coefficients
        """
        X_lm_hp = hp.map2alm(X, self.L)
        return pys2let.lm_hp2lm(X_lm_hp, self.L)

    def _gradg_analysis(self, preds):
        """
        Takes in predictions of harmonic coefficients and computes the gradient wrt pixel values
        """
        return (preds - self.data) / (self.sig_d ** 2)

    def _gradg_synthesis(self, preds):
        """
        Takes in predictions of harmonic coefficients and calculates gradients wrt scaling/wavelet coefficients
        """
        diff_lm = preds - self.data
        f = pys2let.alm2map_mw(diff_lm, self.L, 0)
        f_wav, f_scal = pys2let.synthesis_adjoint_axisym_wav_mw(
            f, self.B, self.L, self.J_min
        )
        f_scal_lm = pys2let.map2alm_mw(f_scal, self.L, 0)
        f_wav_lm = np.zeros([self.L ** 2, self.nscales], dtype=np.complex)
        vlen = self.L * (2 * self.L - 1)
        for j in range(self.nscales):
            f_wav_lm[:, j] = pys2let.map2alm_mw(
                f_wav[j * vlen : (j + 1) * vlen + 1], self.L, 0
            )
        return flatten_mlm(f_wav_lm, f_scal_lm) / (self.sig_d ** 2)


class SWC2PixOperator(ISWTOperator):
    """
    Inverse spherical wavelet transfrom operator.
    Returns pixel valyes.
    Analysis: sample pixel values
    Synthesis: sample harmonic wavelet coefficeints
    """

    def __init__(self, data, sig_d, Nside, L, B, J_min, setting, dirs=1, spin=0):
        self.Nside = Nside
        super().__init__(data, sig_d, L, B, J_min, setting, dirs, spin)

    def _forward_synthesis(self, X):
        clm = super()._forward_synthesis(X)
        clm_hp = pys2let.lm2lm_hp(clm, self.L)
        c = alm2map(clm_hp, self.Nside)
        return c

    def _forward_analysis(self, X):
        return X

    def _gradg_analysis(self, preds):
        return super()._gradg_analysis(preds)

    def _gradg_synthesis(self, preds):
        diff_hp = preds - self.data
        diff_lm_hp = map2alm(diff_hp, self.L)
        diff_lm_mw = pys2let.lm_hp2lm(diff_lm_hp, self.L)
        diff_mw = pys2let.alm2map_mw(diff_lm_mw, self.L, self.spin)

        f_wav, f_scal = pys2let.synthesis_adjoint_axisym_wav_mw(
            diff_mw, self.B, self.L, self.J_min
        )
        f_scal_lm = pys2let.map2alm_mw(f_scal, self.L, 0)
        f_wav_lm = np.zeros((self.L ** 2, self.nscales), dtype=np.complex)
        vlen = pys2let.mw_size(self.L)
        for j in range(self.nscales):
            f_wav_lm[:, j] = pys2let.map2alm_mw(
                f_wav[j * vlen : (j + 1) * vlen + 1], self.L, 0
            )
        return flatten_mlm(f_wav_lm, f_scal_lm) / (self.sig_d ** 2)
